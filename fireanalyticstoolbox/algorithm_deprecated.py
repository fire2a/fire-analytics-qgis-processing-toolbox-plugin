#!python3
"""
/***************************************************************************
 FireToolbox
                                 A QGIS plugin
 A collection of fire insights related algorithms
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-06-04
        copyright            : (C) 2024 by Fernando Badilla Veliz - Fire2a.com
        email                : fbadilla@ing.uchile.cl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = "Fernando Badilla Veliz - Fire2a.com"
__date__ = "2023-08-30"
__copyright__ = "(C) 2023 by Fernando Badilla Veliz - Fire2a.com"

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = "$Format:%H$"

from pathlib import Path
from re import findall
from typing import Any

import processing
from fire2a.raster import id2xy, read_raster, transform_coords_to_georef
from numpy import dtype, fromiter, int32
from qgis.core import (QgsFeature, QgsFeatureSink, QgsField, QgsFields, QgsGeometry, QgsPoint, QgsProcessing,
                       QgsProcessingAlgorithm, QgsProcessingContext, QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFile, QgsProcessingParameterRasterLayer, QgsProcessingUtils, QgsWkbTypes)
from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon

from .algorithm_utils import write_log
from .config import NAME

plugin_dir = Path(__file__).parent
assets_dir = Path(plugin_dir, "simulator")


class IgnitionPointsFromLogFileSIMPP(QgsProcessingAlgorithm):
    """Ignition Points Simulation Post Processing Algorithm load LogFile.txt and create a point layer"""

    BASE_LAYER = "BaseLayer"
    IN_LOG = "LogFile"
    OUT_LAYER = "IgnitionPointsLayer"

    def checkParameterValues(self, parameters: dict[str, Any], context: QgsProcessingContext) -> tuple[bool, str]:
        """log file exists and is not empty"""
        log_file = Path(self.parameterAsString(parameters, self.IN_LOG, context))
        if not log_file.stat().st_size > 0:
            return False, f"{log_file} file is empty!"
        log_text = log_file.read_text(encoding="utf-8")
        simulation_id, ignition_cell = fromiter(
            findall("ignition point for Year [0-9]*, sim ([0-9]+): ([0-9]+)", log_text), dtype=dtype((int32, 2))
        ).T
        if len(simulation_id) == 0 or len(ignition_cell) == 0:
            return (
                False,
                (
                    f"{log_file} file does not contain any match for ignition points: 'ignition point for Year [0-9]*,"
                    " sim ([0-9]+): ([0-9]+)'"
                ),
            )
        return True, ""

    def initAlgorithm(self, config):
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.BASE_LAYER,
                # description=self.tr("Base raster (normally fuel or elevation) to get the geotransform", "BaseContext"),
                description=QCoreApplication.translate(
                    "BaseContext", "Base raster (normally fuel or elevation) to get the geotransform"
                ),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=False,
            )
        )
        self.addParameter(
            QgsProcessingParameterFile(
                name=self.IN_LOG,
                description="Simulator log file (normally firesim_yymmdd_HHMMSS/results/LogFile.txt)",
                behavior=QgsProcessingParameterFile.File,
                extension="txt",
                defaultValue=None,
                optional=False,
            )
        )
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                name=self.OUT_LAYER,
                description=self.tr("Output ignition point(s) layer"),
                type=QgsProcessing.TypeVectorPoint,
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """Here is where the processing itself takes place."""
        # BASE LAYER
        base_raster = self.parameterAsRasterLayer(parameters, self.BASE_LAYER, context)
        _, raster_props = read_raster(base_raster.publicSource(), data=False)
        feedback.pushDebugInfo(f"base_raster.crs.authid: {base_raster.crs().authid()}\n")
        # log_file
        log_file = Path(self.parameterAsString(parameters, self.IN_LOG, context))
        log_text = log_file.read_text(encoding="utf-8")
        preview_from, preview_to = 34, 256 * 2 - 34
        if len(log_text) < preview_from:
            preview_from = 0
        if len(log_text) < preview_to:
            preview_to = len(log_text)
        feedback.pushDebugInfo(f"preview of simulation log:\n{log_text[preview_from: preview_to]}\n")
        # create layer
        fields = QgsFields()
        fields.append(QgsField(name="simulation", type=QVariant.Int, len=10))
        fields.append(QgsField(name="cell", type=QVariant.Int, len=10))
        fields.append(QgsField(name="x_pixel", type=QVariant.Int, len=10))
        fields.append(QgsField(name="y_line", type=QVariant.Int, len=10))
        (sink, dest_id) = self.parameterAsSink(
            parameters,
            self.OUT_LAYER,
            context,
            fields,
            QgsWkbTypes.Point,  # >v3.3 ? Qgis.WkbType.Point
            base_raster.crs(),
        )
        # feedback.pushDebugInfo(f"dest_id: {dest_id}, type: {type(dest_id)}")
        # feedback.pushDebugInfo(f"sink: {sink}, type: {type(sink)}, dir: {dir(sink)}")
        feedback.pushDebugInfo(f"output layer id: {dest_id}\n")
        # parse log file
        simulation_id, ignition_cell = fromiter(
            findall("ignition point for Year [0-9]*, sim ([0-9]+): ([0-9]+)", log_text), dtype=dtype((int32, 2))
        ).T
        ignition_cell -= 1  # 1 based to 0 based
        # add features
        for sim_id, cell in zip(simulation_id, ignition_cell):
            i, j = id2xy(cell, raster_props["RasterXSize"], raster_props["RasterYSize"])
            x, y = transform_coords_to_georef(i + 0.5, j + 0.5, raster_props["Transform"])
            feature = QgsFeature(fields)
            feature.setId(int(sim_id))
            feature.setAttributes([int(sim_id), int(cell + 1), int(i), int(j)])
            feature.setGeometry(QgsGeometry(QgsPoint(x, y)))
            sink.addFeature(feature, QgsFeatureSink.FastInsert)
            feedback.pushDebugInfo(f"simulation id: {sim_id}, ignition cell: {cell}, x: {x}, y: {y}, i: {i}, j: {j}")
            if feedback.isCanceled():
                break
        # feedback.pushDebugInfo(f"addFeatures: {sink}, {type(sink)}")
        feedback.pushDebugInfo("\n")
        processing.run(
            "qgis:setstyleforvectorlayer",
            {"INPUT": dest_id, "STYLE": str(Path(assets_dir, "ignition_points.qml"))},
            context=context,
            feedback=feedback,
            is_child_algorithm=True,
        )
        if context.willLoadLayerOnCompletion(dest_id):
            layer = QgsProcessingUtils.mapLayerFromString(dest_id, context)
            layer_details = context.LayerDetails(
                "Ignition Points",
                context.project(),
                dest_id,
                QgsProcessingUtils.LayerHint.Vector,
                # layer.name(), context.project(), dest_id, QgsProcessingUtils.LayerHint.Vector
            )
            layer_details.groupName = NAME["layer_group"]
            layer_details.layerSortKey = 0
            context.addLayerToLoadOnCompletion(dest_id, layer_details)

        write_log(feedback, name=self.name())
        return {self.OUT_LAYER: dest_id}

    def tr(self, string, context="IgnitionPointsFromLogFileSIMPP"):
        return QCoreApplication.translate(context, string)

    def createInstance(self):
        return IgnitionPointsFromLogFileSIMPP()

    def group(self):
        return self.tr("zdeprecated")

    def groupId(self):
        return "zdeprecated"

    def name(self):
        return "ignitionpointsfromlogfile"

    def displayName(self):
        return self.tr("Ignition Points From LogFile")

    def icon(self):
        return QIcon(":/plugins/fireanalyticstoolbox/assets/ignitionpoint.svg")
