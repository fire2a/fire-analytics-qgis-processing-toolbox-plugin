# -*- coding: utf-8 -*-

"""
/***************************************************************************
 FireToolbox
                                 A QGIS plugin
 A collection of fire insights related algorithms
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-08-30
        copyright            : (C) 2023 by Fernando Badilla Veliz - Fire2a.com
        email                : fbadilla@ing.uchile.cl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = "Fernando Badilla Veliz - Fire2a.com"
__date__ = "2023-08-30"
__copyright__ = "(C) 2023 by Fernando Badilla Veliz - Fire2a.com"

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = "$Format:%H$"

from datetime import datetime
from math import isclose
from multiprocessing import cpu_count
from os import chmod, kill, popen, sep
from pathlib import Path
from platform import machine as platform_machine
from platform import system as platform_system
from shutil import copy, which
from signal import SIGTERM
from stat import S_IXGRP, S_IXOTH, S_IXUSR
from typing import Any

import processing
from fire2a.raster import read_raster, transform_georef_to_coords, xy2id
from numpy import array
from osgeo import gdal
from qgis.core import (Qgis, QgsMessageLog, QgsProcessing, QgsProcessingAlgorithm, QgsProcessingContext,
                       QgsProcessingException, QgsProcessingParameterBoolean, QgsProcessingParameterDefinition,
                       QgsProcessingParameterEnum, QgsProcessingParameterFile, QgsProcessingParameterFolderDestination,
                       QgsProcessingParameterNumber, QgsProcessingParameterRasterLayer, QgsProcessingParameterString,
                       QgsProcessingParameterVectorLayer, QgsProject, QgsRasterLayer, QgsUnitTypes)
from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon

from .algorithm_utils import write_log
from .config import TAG, aConfig
from .simulator.c2fqprocess import C2F

plugin_dir = Path(__file__).parent
c2f_path = Path(plugin_dir, "simulator", "C2F", "Cell2Fire")


aconfig = aConfig()
SIM_INPUTS = aconfig.SIM_INPUTS
NAME = aconfig.NAME
SIM_OUTPUTS = aconfig.SIM_OUTPUTS
STATS = aconfig.STATS
QgsMessageLog.logMessage(f"{SIM_INPUTS=}", tag=TAG, level=Qgis.Info)
QgsMessageLog.logMessage(f"{NAME=}", tag=TAG, level=Qgis.Info)
QgsMessageLog.logMessage(f"{SIM_OUTPUTS=}", tag=TAG, level=Qgis.Info)
QgsMessageLog.logMessage(f"{STATS=}", tag=TAG, level=Qgis.Info)
output_args = [item["arg"] for item in SIM_OUTPUTS.values()]
output_names = [item["name"] for item in SIM_OUTPUTS.values()]


class FireSimulatorAlgorithm(QgsProcessingAlgorithm):
    """Cell2Fire"""

    output_dict = None
    results_dir = None

    fuel_models = NAME["fuel_models"]
    fuel_tables = NAME["fuel_tables"]
    ignition_modes = NAME["ignition_modes"]
    weather_modes = NAME["weather_modes"]
    OUTPUTS = "OutputOptions"
    INSTANCE_DIR = "InstanceDirectory"
    INSTANCE_IN_PROJECT = "InstanceInProject"
    RESULTS_DIR = "ResultsDirectory"
    RESULTS_IN_INSTANCE = "ResultsInInstance"
    FUEL_MODEL = "FuelModel"
    FUEL = "FuelRaster"
    PAINTFUELS = "SetFuelLayerStyle"
    FIREBREAKS = "FireBreaksRaster"
    ELEVATION = "ElevationRaster"
    # PV = "PvRaster"
    CBH = "CbhRaster"
    CBD = "CbdRaster"
    CCF = "CcfRaster"
    HM = "HmRaster"
    CROWN = "EnableCrownFire"
    IGNITION_MODE = "IgnitionMode"
    NSIM = "NumberOfSimulations"
    IGNIPROBMAP = "IgnitionProbabilityMap"
    IGNIPOINT = "IgnitionPointVectorLayer"
    IGNIRADIUS = "IgnitionRadius"
    WEATHER_MODE = "WeatherMode"
    WEAFILE = "WeatherFile"
    WEADIR = "WeatherDirectory"
    FMC = "FoliarMoistureContent"
    LDFMCS = "LiveAndDeadFuelMoistureContentScenario"
    SIM_THREADS = "SimulationThreads"
    RNG_SEED = "RandomNumberGeneratorSeed"
    ADD_ARGS = "OtherCliArgs"
    DRYRUN = "DryRun"
    # def validateInputCrs(self, parameters, context):
    #    """ prints friendly warning if input crs dont match across all inputs
    #    """
    #    super().validateInputCrs(parameters, context)

    def canExecute(self):
        """checks if cell2fire binary is available"""
        if platform_system() == "Windows":
            suffix = ".exe"

        elif platform_system() == "Linux":
            if which("lsb_release") is None:
                return False, "lsb_release command not found! (apt install lsb-release)"
            if which("uname") is None:
                return False, "uname command not found! (apt install uname)"
            distribution = popen("lsb_release --short --id 2>/dev/null").read().strip()
            codename = popen("lsb_release --short --codename 2>/dev/null").read().strip()
            machine = popen("uname --machine 2>/dev/null").read().strip()
            suffix = "." + distribution + "." + codename + "." + machine
            c2f_bin = Path(c2f_path, f"Cell2Fire{suffix}")
            if not c2f_bin.is_file():
                QgsMessageLog.logMessage(
                    f"{self.name()}, Cell2Fire binary not available for {distribution=} {codename=} {machine=}",
                    tag=TAG,
                    level=Qgis.Warning,
                )
                QgsMessageLog.logMessage(f"{self.name()}, Not a file! {c2f_bin}", tag=TAG, level=Qgis.Warning)
                QgsMessageLog.logMessage(f"{self.name()}, Falling back to manylinux", tag=TAG, level=Qgis.Critical)
                suffix = ""
                c2f_bin = Path(c2f_path, f"Cell2Fire{suffix}")
            if which("ldd"):
                ldd = popen("ldd " + str(c2f_bin)).read()
                QgsMessageLog.logMessage(f"{self.name()}, Binary dependencies:\n{ldd}", tag=TAG, level=Qgis.Info)
                if "not found" in ldd:
                    QgsMessageLog.logMessage(
                        f"{self.name()}, Missing dependencies! Falling back to manylinux", tag=TAG, level=Qgis.Critical
                    )
                    suffix = ""

        elif platform_system() == "Darwin":
            # echo "suffix="$(uname -s).${{ matrix.runner }}.$(arch)"" >> $GITHUB_ENV
            os = popen("uname -s 2>/dev/null").read().strip()
            pname = popen("sw_vers -productName 2>/dev/null").read().strip()
            pmayorvers = int(popen("sw_vers -productVersion 2>/dev/null | cut -d '.' -f 1 2>/dev/null").read().strip())
            arch = popen("arch 2>/dev/null").read().strip()
            if arch == "arm64" and pmayorvers != 14:
                QgsMessageLog.logMessage(
                    f"{self.name()}, Apple machine: ${arch}, OSX:{pmayorvers}! Forcing 14", tag=TAG, level=Qgis.Critical
                )
                pmayorvers = 14
            if arch == "i386" and pmayorvers > 13:
                QgsMessageLog.logMessage(
                    f"{self.name()}, Apple machine: ${arch}, OSX:{pmayorvers}! Forcing 13", tag=TAG, level=Qgis.Critical
                )
                pmayorvers = 13
            if arch == "i386" and pmayorvers < 12:
                QgsMessageLog.logMessage(
                    f"{self.name()}, Apple machine: ${arch}, OSX:{pmayorvers}! Forcing 12", tag=TAG, level=Qgis.Critical
                )
                pmayorvers = 12
            suffix = f"_{os}.{pname}-{pmayorvers}.{arch}-static"
            if which("otool -L"):
                c2f_bin = Path(c2f_path, f"Cell2Fire{suffix}")
                if c2f_bin.is_file():
                    ldd = popen("otool -L " + str(c2f_bin) + " 2>&1 ").read()
                    QgsMessageLog.logMessage(
                        f"{self.name()}, Dependencies of {c2f_bin.name}:\n{ldd}", tag=TAG, level=Qgis.Info
                    )
                else:
                    suffix = suffix.replace("-static", "")
                    c2f_bin = Path(c2f_path, f"Cell2Fire{suffix}")
                    if c2f_bin.is_file():
                        ldd = popen("otool -L " + str(c2f_bin) + " 2>&1 ").read()
                        QgsMessageLog.logMessage(
                            f"{self.name()}, Dependencies of {c2f_bin.name}:\n{ldd}", tag=TAG, level=Qgis.Info
                        )
            #     if "not found" in ldd:
            #         return False, "Missing dependencies! (brew install libomp?)"
        else:
            return False, f"OS {platform_system()} not supported yet"

        c2f_bin = Path(c2f_path, f"Cell2Fire{suffix}")
        if not c2f_bin.is_file():
            return False, "Cell2Fire binary not found!"
        st = c2f_bin.stat()
        # TODO check if chmod is needed or failed!
        chmod(c2f_bin, st.st_mode | S_IXUSR | S_IXGRP | S_IXOTH)
        QgsMessageLog.logMessage(f"{self.name()}, Using Binary {c2f_bin}", tag=TAG, level=Qgis.Success)
        return True, ""

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        project_path = QgsProject().instance().absolutePath()
        # LANDSCAPE
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.FUEL_MODEL,
                description="==================\n"
                + self.tr("LANDSCAPE SECTION")
                + "\n\n"
                + self.tr("Surface fuel model"),
                options=self.fuel_models,
                allowMultiple=False,
                defaultValue=0,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.FUEL,
                description=SIM_INPUTS["fuels"]["description"],
                defaultValue=[QgsProcessing.TypeRaster],
                optional=False,
            )
        )
        self.addParameter(
            QgsProcessingParameterBoolean(
                name=self.PAINTFUELS,
                description=self.tr(
                    "Style (paint) fuel raster with selected surface fuel model (native:setlayerstyle)"
                ),
                defaultValue=False,
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.ELEVATION,
                description=SIM_INPUTS["elevation"]["description"] + f' [{SIM_INPUTS["elevation"]["units"]}]',
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        # self.addParameter(
        #     QgsProcessingParameterRasterLayer(
        #         name=self.PV,
        #         description=self.tr("pv: Landscape Protection Value"),
        #         defaultValue=[QgsProcessing.TypeRaster],
        #         optional=True,
        #     )
        # )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.CBH,
                description=self.tr(SIM_INPUTS["cbh"]["description"] + f' [{SIM_INPUTS["cbh"]["units"]}]'),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.CBD,
                description=self.tr(SIM_INPUTS["cbd"]["description"] + f' [{SIM_INPUTS["cbd"]["units"]}]'),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.CCF,
                description=self.tr(SIM_INPUTS["ccf"]["description"] + f' [{SIM_INPUTS["ccf"]["units"]}]'),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.HM,
                description=self.tr(
                    SIM_INPUTS["hm"]["description"] + f' [{SIM_INPUTS["hm"]["units"]}] (only Scott & Burgan)'
                ),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterBoolean(
                name=self.CROWN,
                description=self.tr("Enable Crown Fire behavior"),
                defaultValue=False,
                optional=False,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.FIREBREAKS,
                description=self.tr("\nFirebreaks raster (1=firebreak)"),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        # IGNITION
        self.addParameter(
            QgsProcessingParameterNumber(
                name=self.NSIM,
                description="\n================\n"
                + self.tr("IGNITION SECTION")
                + "\n\n"
                + self.tr("Number of simulations"),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=3,
                optional=False,
                minValue=1,
                maxValue=66642069,
            )
        )
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.IGNITION_MODE,
                description=self.tr("Generation mode"),
                options=self.ignition_modes,
                allowMultiple=False,
                defaultValue=0,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.IGNIPROBMAP,
                description=SIM_INPUTS["py"]["description"] + f' [{SIM_INPUTS["py"]["units"]}]',
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        self.addParameter(
            # QgsProcessingParameterGeometry(
            #     name=self.IGNIPOINT,
            #     description="Single point vector layer (requires generation mode 2)",
            #     defaultValue=None,
            #     optional=True,
            #     geometryTypes=[Qgis.GeometryType.PointGeometry],  # Qgis.GeometryType(0)],
            #     allowMultipart=False,
            QgsProcessingParameterVectorLayer(
                name=self.IGNIPOINT,
                description=self.tr("Single point vector layer (requires generation mode 2)"),
                types=[QgsProcessing.TypeVectorPoint],
                defaultValue=None,
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterNumber(
                name=self.IGNIRADIUS,
                description=self.tr("Radius around single point layer (requires generation mode 2)"),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=0,
                optional=True,
                minValue=0,
                maxValue=11,
            )
        )
        # WEATHER
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.WEATHER_MODE,
                description="\n================\n" + self.tr("WEATHER SECTION") + "\n\n" + self.tr("source mode"),
                options=self.weather_modes,
                allowMultiple=False,
                defaultValue=0,
            )
        )
        weafile = Path(project_path, "Weather.csv")
        self.addParameter(
            QgsProcessingParameterFile(
                name=self.WEAFILE,
                description=self.tr("Single weather file scenario (requires source 0)"),
                behavior=QgsProcessingParameterFile.File,
                extension="csv",
                defaultValue=str(weafile) if weafile.is_file() else None,
                optional=True,
                fileFilter="",
            )
        )
        self.addParameter(
            QgsProcessingParameterFile(
                name=self.WEADIR,
                description=self.tr("From multiple weathers in a directory (requires source 1)"),
                behavior=QgsProcessingParameterFile.Folder,
                extension="",
                defaultValue=None,
                optional=True,
                fileFilter="",
            )
        )
        self.addParameter(
            QgsProcessingParameterNumber(
                name=self.FMC,
                description=self.tr(
                    "Foliar Moisture Content [40%...200%] (requires Crown fire; Scott & Burgan or Kitral Fuel Model)"
                ),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=66,
                optional=False,
                minValue=40,
                maxValue=200,
            )
        )
        self.addParameter(
            QgsProcessingParameterNumber(
                name=self.LDFMCS,
                description=self.tr(
                    "Live & Dead Fuel Moisture Content Scenario [1=dry..4=moist] (requires Scott & Burgan Fuel Model)"
                ),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=2,
                optional=True,
                minValue=1,
                maxValue=4,
            )
        )
        # RUN CONFIGURATION
        self.addParameter(
            QgsProcessingParameterNumber(
                name=self.SIM_THREADS,
                description=(
                    "\n===================\n"
                    + self.tr("RUN CONFIGURATION")
                    + "\n"
                    + self.tr(
                        "simulation cpu threads (proportional to overall load to the computer by controlling"
                        " number of simultaneous simulations)"
                    )
                    # "[check Advanced>Algorithm Settings alternative settings])"
                ),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=cpu_count() - 1,
                optional=False,
                minValue=1,
                maxValue=cpu_count(),
            )
        )
        self.addParameter(
            QgsProcessingParameterNumber(
                name=self.RNG_SEED,
                description=self.tr("Seed for the random number generator"),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=123,
                optional=False,
                minValue=1,
                maxValue=2450003,
            )
        )
        # OUTPUTS
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.OUTPUTS,
                description="\n================\n"
                + self.tr("OUTPUTS SECTION")
                + "\n\n"
                + self.tr("options (click '...' button on the right)"),
                options=[
                    item["name"] + item["suffix"] if "suffix" in item else item["name"] for item in SIM_OUTPUTS.values()
                ],
                allowMultiple=True,
                defaultValue=[
                    i
                    for i, key in enumerate(SIM_OUTPUTS)
                    if key in ["propagationscars", "propagationdigraph", "ignitionpoints", "ros"]
                ],
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterBoolean(
                name=self.INSTANCE_IN_PROJECT,
                description=self.tr(
                    "Override instance directory to '$(Project Home)/firesim_yymmdd_HHMMSS' (project must be open and"
                    " saved locally)"
                ),
                defaultValue=False,
                optional=False,
            )
        )
        self.addParameter(
            QgsProcessingParameterFolderDestination(
                name=self.INSTANCE_DIR,
                description=self.tr("Instance directory (must be empty)"),
                defaultValue=None,
                optional=True,
                createByDefault=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterBoolean(
                name=self.RESULTS_IN_INSTANCE,
                description=self.tr("Override results directory to '$(instance directory)/results'"),
                defaultValue=True,
                optional=False,
            )
        )
        self.addParameter(
            QgsProcessingParameterFolderDestination(
                name=self.RESULTS_DIR,
                description=self.tr("Results directory (must be empty)"),
                defaultValue=None,
                optional=True,
                createByDefault=True,
            )
        )
        # advanced
        qpps = QgsProcessingParameterString(
            name=self.ADD_ARGS,
            description=self.tr("Append additional command-line parameters (i.e., '--verbose', use with caution!)"),
            optional=True,
        )
        qpps.setFlags(qpps.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(qpps)
        qppb = QgsProcessingParameterBoolean(
            name=self.DRYRUN,
            description=self.tr("(dry run) Don't simulate! Build instance folder, print the command to run, stop!"),
            defaultValue=False,
            optional=True,
        )
        qppb.setFlags(qppb.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(qppb)

    def checkParameterValues(self, parameters: dict[str, Any], context: QgsProcessingContext) -> tuple[bool, str]:
        if parameters[self.IGNITION_MODE] == 1 and parameters[self.IGNIPROBMAP] is None:
            return False, "%s can't be None if %s generation is 1" % (self.IGNIPROBMAP, self.IGNITION_MODE)
        if parameters[self.IGNITION_MODE] == 2 and parameters[self.IGNIPOINT] is None:
            return False, "%s can't be None if %s generation is 2" % (self.IGNIPOINT, self.IGNITION_MODE)

        weafile = self.parameterAsFile(parameters, self.WEAFILE, context)
        if parameters[self.WEATHER_MODE] == 0 and weafile == "":
            return False, "%s can't be None if %s source is 0" % (self.WEAFILE, self.WEATHER_MODE)

        weadir = self.parameterAsFile(parameters, self.WEADIR, context)
        if parameters[self.WEATHER_MODE] in [1, 2] and weadir == "":
            return False, "%s can't be None if %s source is 1 or 2" % (self.WEADIR, self.WEATHER_MODE)

        rasters = get_rasters(self, parameters, context)
        fuels = rasters.pop("fuels")
        fuels_props = get_qgs_raster_properties(fuels)
        fuel_driver = get_gdal_driver_shortname(fuels)
        if fuel_driver not in ["AAIGrid", "GTiff"]:
            return False, "fuel raster format is not AAIGrid nor GTiff, got %s" % fuel_driver
        for k, v in rasters.items():
            if v is None:
                continue
            driver = get_gdal_driver_shortname(v)
            if driver not in ["AAIGrid", "GTiff"]:
                return False, f'{k} is not AAIGrid nor GTiff, "{v.name()}" is {driver}'
            raster_props = get_qgs_raster_properties(v)
            if raster_props["units"] != QgsUnitTypes.DistanceMeters:
                unit_name = Qgis.DistanceUnit(raster_props["units"]).name
                return (
                    False,
                    f'{k} units are not meters, "{v.name()}" has "{unit_name}" units, write layer to meters-CRS!',
                )
            ok, msg = compare_raster_properties(fuels_props, raster_props)
            if not ok:
                return False, msg

        # output dirs
        project_path = QgsProject().instance().absolutePath()
        # INSTANCE DIR
        if self.parameterAsBool(parameters, self.INSTANCE_IN_PROJECT, context) and project_path != "":
            instance_dir = Path(project_path, "firesim_" + datetime.now().strftime("%y%m%d_%H%M%S"))
        else:
            instance_dir = Path(self.parameterAsString(parameters, self.INSTANCE_DIR, context))
        if next(instance_dir.glob("*"), None) is not None:
            return False, f"{instance_dir} is not empty!"
        # RESULTS DIR
        if self.parameterAsBool(parameters, self.RESULTS_IN_INSTANCE, context) and project_path != "":
            results_dir = Path(instance_dir, "results")
        else:
            results_dir = Path(self.parameterAsString(parameters, self.RESULTS_DIR, context))
        if next(results_dir.glob("*"), None) is not None:
            return False, f"{results_dir} is not empty!"

        return True, "all ok"

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        # feedback.pushDebugInfo("processAlgorithm start")
        # QgsMessageLog.logMessage(f"{self.name()}, INPUT: {parameters}", tag=TAG, level=Qgis.Info)
        # feedback.pushDebugInfo(f"parameters {parameters}")
        # feedback.pushDebugInfo(f"context args: {context.asQgisProcessArguments()}")
        # GET USER INPUT
        fuel_model = self.parameterAsInt(parameters, self.FUEL_MODEL, context)
        ignition_mode = self.parameterAsInt(parameters, self.IGNITION_MODE, context)
        weather_mode = self.parameterAsInt(parameters, self.WEATHER_MODE, context)
        selected_outputs = self.parameterAsEnums(parameters, self.OUTPUTS, context)
        selected_output_strings = array(output_names)[selected_outputs]
        feedback.pushDebugInfo(
            f"fuel_model: {self.fuel_models[fuel_model]}\n"
            f"ignition_mode: {self.ignition_modes[ignition_mode]}\n"
            f"weather_mode: {self.weather_modes[weather_mode]}\n"
            f"selected_output_strings: {selected_output_strings}\n"
        )
        is_crown = self.parameterAsBool(parameters, self.CROWN, context)
        paint_fuels = self.parameterAsBool(parameters, self.PAINTFUELS, context)
        # BUILD ARGS
        # output_options = [item["name"] for item in SIM_OUTPUTS]
        args = {key: None for key in output_args}
        if fuel_model == 0:
            args["sim"] = "S"
        elif fuel_model == 1:
            args["sim"] = "K"
        elif fuel_model == 2:
            args["sim"] = "C"
        else:
            raise QgsProcessingException(f"fuel_model {fuel_model} not supported")
        args["nsims"] = self.parameterAsInt(parameters, self.NSIM, context)
        args["seed"] = self.parameterAsInt(parameters, self.RNG_SEED, context)
        args["nthreads"] = self.parameterAsInt(parameters, self.SIM_THREADS, context)
        args["fmc"] = self.parameterAsInt(parameters, self.FMC, context)
        args["scenario"] = self.parameterAsInt(parameters, self.LDFMCS, context)
        args["cros"] = is_crown
        # match ignition_mode:
        #    case 0:
        if ignition_mode == 0:
            args["ignitions"] = False
        elif ignition_mode == 1:
            # case 1:
            args["ignitions"] = False
        elif ignition_mode == 2:
            # case 2:
            args["ignitions"] = True
            args["IgnitionRad"] = self.parameterAsInt(parameters, self.IGNIRADIUS, context)
        # match weather_mode:
        #     case 0:
        if weather_mode == 0:
            args["weather"] = "rows"
        elif weather_mode == 1:
            # case 1:
            args["weather"] = "random"
        # case 2:
        #     args["weather"] = "rows"

        # output dirs
        project_path = QgsProject().instance().absolutePath()
        # INSTANCE DIR
        if self.parameterAsBool(parameters, self.INSTANCE_IN_PROJECT, context) and project_path != "":
            instance_dir = Path(project_path, "firesim_" + datetime.now().strftime("%y%m%d_%H%M%S"))
        else:
            instance_dir = Path(self.parameterAsString(parameters, self.INSTANCE_DIR, context))
        instance_dir.mkdir(parents=True, exist_ok=True)
        feedback.pushDebugInfo(
            f"instance_dir: {str(instance_dir)}\n"
            f"_exists: {instance_dir.exists()}\n"
            f"_is_dir: {instance_dir.is_dir()}\n"
            f"_contents: {list(instance_dir.glob('*'))}\n"
        )
        # RESULTS DIR
        if self.parameterAsBool(parameters, self.RESULTS_IN_INSTANCE, context) and project_path != "":
            results_dir = Path(instance_dir, "results")
        else:
            results_dir = Path(self.parameterAsString(parameters, self.RESULTS_DIR, context))
        if " " in str(results_dir):
            feedback.reportError(f"results directory can't contain spaces: {results_dir}")
            raise QgsProcessingException(f"results directory can't contain spaces: {results_dir}")
        self.results_dir = results_dir
        results_dir.mkdir(parents=True, exist_ok=True)
        feedback.pushDebugInfo(
            f"results_dir: {str(results_dir)}\n"
            f"_exists: {results_dir.exists()}\n"
            f"_is_dir: {results_dir.is_dir()}\n"
            f"_contents: {list(results_dir.glob('*'))}\n"
        )

        # COPY
        # fuel table
        copy(Path(plugin_dir, "simulator", self.fuel_tables[fuel_model]), instance_dir)
        # layers
        feedback.pushDebugInfo("\n")
        raster = get_rasters(self, parameters, context)
        for k, v in raster.items():
            if v is None:
                feedback.pushDebugInfo(f"is None: {k}:{v}")
                continue
            if (
                (k in ["fuels", "elevation"])
                or (k in ["cbh", "cbd", "ccf", "hm"] and is_crown)
                or (k == "py" and ignition_mode == 1)
            ):
                feedback.pushDebugInfo(f"copy: {k}:{v}")
                driver = get_gdal_driver_shortname(v)
                if driver == "GTiff":
                    ext = "tif"
                elif driver == "AAIGrid":
                    ext = "asc"
                else:
                    # TODO create tif
                    feedback.reportError(f"unsupported raster format: {k}, {v}, {driver}")
                copy(v.publicSource(), Path(instance_dir, f"{k}.{ext}"))
            else:
                feedback.pushDebugInfo(f"NO copy: {k}:{v}")
        feedback.pushDebugInfo("\n")

        # FIREBREAKS
        if firebreaks := self.parameterAsRasterLayer(parameters, self.FIREBREAKS, context):
            from fire2a.cell2fire import raster_layer_to_firebreak_csv

            output_file = Path(instance_dir, "firebreaks.csv")
            raster_layer_to_firebreak_csv(firebreaks, firebreak_val=1, output_file=output_file)
            args["FirebreakCells"] = str(output_file)

        if paint_fuels:
            feedback.pushDebugInfo(
                f"painting fuel layer: {raster['fuels'].name()}, with style {self.fuel_models[fuel_model]}"
            )
            processing.run(
                "native:setlayerstyle",
                {
                    "INPUT": raster["fuels"],
                    "STYLE": str(Path(plugin_dir, "simulator", f"fuel_{fuel_model}_layerStyle.qml")),
                },
                context=context,
                feedback=feedback,
                is_child_algorithm=True,
            )
            feedback.pushDebugInfo("painted\n")

        # IGNITION
        _, raster_props = read_raster(raster["fuels"].publicSource(), data=False)
        GT = raster_props["Transform"]
        W = raster_props["RasterXSize"]
        if ignition_mode == 2:
            point_lyr = self.parameterAsVectorLayer(parameters, self.IGNIPOINT, context)
            for feature in point_lyr.getFeatures():
                feedback.pushDebugInfo(f"feature: {feature.id()}, {feature.geometry().asWkt()}")
                point = feature.geometry().asPoint()
                x, y = point.x(), point.y()
                feedback.pushDebugInfo(f"point: {point.asWkt()}, {x}, {y}")
                i, j = transform_georef_to_coords(x, y, GT)
                feedback.pushDebugInfo(f"raster coords {i}, {j}")
                cell = xy2id(i, j, W) + 1
                feedback.pushDebugInfo(f"cell coord: {cell}")
                with open(Path(instance_dir, "Ignitions.csv"), "w") as f:
                    f.write(f"Year,Ncell\n1,{cell}")
                feedback.pushDebugInfo(f"point: {point.asWkt()}, {i}, {j}, {cell}")
            feedback.pushDebugInfo("\n")

        # WEATHER
        # TODO move checks to checkParameterValues
        if weather_mode == 0:
            weafile = self.parameterAsFile(parameters, self.WEAFILE, context)
            if weafile == "":
                # feedback.reportError("Single weather file scenario requires a file!")
                raise QgsProcessingException(self.tr("Single weather file scenario requires a file!"))
            weafileout = Path(instance_dir, "Weather.csv")
            copy(weafile, weafileout)
            feedback.pushDebugInfo(f"copy: {weafile} to {weafileout}\n")
        else:
            weadir = Path(self.parameterAsFile(parameters, self.WEADIR, context))
            weadirout = Path(instance_dir, "Weathers")
            weadirout.mkdir(parents=True, exist_ok=True)
            c = 0
            for wfile in weadir.glob("Weather[0-9]*.csv"):
                copy(wfile, weadirout)
                c += 1
            if c == 0:
                # feedback.reportError("Multiple weathers requires a directory with Weather[0-9]*.csv files!")
                raise QgsProcessingException(
                    self.tr("Multiple weathers requires a directory with Weather[0-9]*.csv files!")
                )
            feedback.pushDebugInfo(f"copy: {weadir} to {weadirout}\n{c} files copied\n")

        # BUILD COMMAND
        for opt in selected_outputs:
            args[output_args[opt]] = True
        args["input-instance-folder"] = '"' + str(instance_dir) + '"'
        args["output-folder"] = '"' + str(results_dir) + '"'
        feedback.pushDebugInfo(f"args: {args}\n")

        cmd = f"./Cell2Fire{get_ext()}"
        feedback.pushDebugInfo(f"binary start cmd: {cmd}\n")
        # cmd alternative (remove powershell below)
        # if platform_system() == "Windows":
        #     cmd.replace("./", "")
        #     cmd = "cmd.exe /s /c " + cmd

        for k, v in args.items():
            if v is False or v is None:
                continue
            cmd += f" --{k} {v if v is not True else ''}"
        # append cli args
        cmd += " " + self.parameterAsString(parameters, self.ADD_ARGS, context)

        if self.parameterAsBool(parameters, self.DRYRUN, context):
            # Determine platform-specific variables
            if platform_system() == "Windows":
                shell = "powershell"
                var_prefix = "$"
                log_command = "2>&1 | Tee-Object -FilePath ($of + '/LogFile.txt')"
            else:
                shell = "bash"
                var_prefix = ""
                log_command = "2>&1 | tee $of/LogFile.txt"
            # Construct the dry run message
            dry_msg = (
                f"DRY RUN! Open a {shell} terminal, execute this:\n\n"
                f'{var_prefix}c2f="{c2f_path}/Cell2Fire{get_ext()}"\n'
                f"{var_prefix}of={args['output-folder']}\n"
                f"{var_prefix}if={args['input-instance-folder']}\n"
                f"{'&' if platform_system()=='Windows' else ''} $c2f "
            )
            for k, v in args.items():
                if v is False or v is None or k in ["input-instance-folder", "output-folder"]:
                    continue
                dry_msg += f" --{k} {v if v is not True else ''}"
            dry_msg += (
                " "
                + self.parameterAsString(parameters, self.ADD_ARGS, context)
                + " --input-instance-folder $if --output-folder $of "
                + log_command
                + "\n"
            )
            # print
            feedback.pushWarning(dry_msg)
            # return
            self.output_dict = {
                self.INSTANCE_DIR: str(instance_dir),
                self.RESULTS_DIR: str(results_dir),
                self.OUTPUTS: selected_outputs,
                self.DRYRUN: True,
                "path": str(c2f_path),
                "command": cmd,
            }
            return self.output_dict

        # RUN
        c2f = C2F(total_sims=args["nsims"], proc_dir=c2f_path, feedback=feedback, log_file=results_dir / "LogFile.txt")
        if platform_system() == "Windows":
            cmd = 'C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command "& {' + cmd + '}"'
        c2f.start(cmd)
        pid = c2f.pid()
        while True:
            c2f.waitForFinished(1000)
            if feedback.isCanceled():
                c2f.terminate()
                kill(pid, SIGTERM)
                feedback.pushDebugInfo("terminate signal sent")
            if c2f.ended:
                feedback.pushDebugInfo("C2F qprocess ended")
                break
            # feedback.pushDebugInfo(f"c2f loop ended:{c2f.ended}")

        self.output_dict = {
            self.INSTANCE_DIR: str(instance_dir),
            self.RESULTS_DIR: str(results_dir),
            self.OUTPUTS: selected_outputs,
        }
        feedback.pushDebugInfo("simulation finished, checking result log!")
        return self.output_dict

    def postProcessAlgorithm(self, context, feedback):
        # feedback.pushDebugInfo("postProcessAlgorithm start")
        output_dict = self.output_dict
        if output_dict.get(self.DRYRUN):
            feedback.pushWarning("\n DRY RUN! instructions ended (is up to the user to run this instance)")
            if platform_system == "Windows":
                tee = "| Tee-Object -FilePath"
                follow = "Get-Content -Wait -Tail"
            else:
                tee = "| tee"
                follow = "tail --follow"
            feedback.pushConsoleInfo(
                f"PRO TIP: To make it even faster replace '{tee}' with '>', and periodically check the log file with {follow} $of/LogFile.txt in another terminal"
            )
            write_log(feedback, name=self.name())
            return output_dict
        instance_dir = output_dict[self.INSTANCE_DIR]
        results_dir = output_dict[self.RESULTS_DIR]
        selected_outputs = output_dict[self.OUTPUTS]
        # CHECK RESULTS
        log_file = Path(results_dir, "LogFile.txt")
        if log_file.is_file() and log_file.stat().st_size > 0:
            # feedback.pushDebugInfo(log_file.read_text())
            feedback.pushInfo(f"simulator log {log_file.absolute()} ready...")
        else:
            feedback.reportError(f"log {log_file} not found or empty!")
            raise QgsProcessingException(f"{log_file} not found or empty!")
        output_dict["LogFile"] = str(log_file)
        #
        for opt in selected_outputs:
            name = output_names[opt]
            output_dict[name] = True
            feedback.pushDebugInfo(f"output: {name} True")
        #
        for st in STATS.values():
            files = Path(results_dir, st["dir"]).glob(st["file"] + "[0-9]*")
            if sample_file := next(files, None):
                output_dict[st["name"]] = str(sample_file)
            else:
                output_dict[st["name"]] = None

        grid = SIM_OUTPUTS["propagationscars"]
        final_grid = SIM_OUTPUTS["finalscar"]
        files = Path(results_dir).glob(grid["dir"] + "[0-9]*" + sep + grid["file"] + "[0-9]*")
        if sample_file := next(files, None):
            output_dict[grid["name"]] = str(sample_file)
            output_dict[final_grid["name"]] = str(sample_file)
        else:
            output_dict[grid["name"]] = None
            output_dict[final_grid["name"]] = None

        msg = SIM_OUTPUTS["propagationdigraph"]
        files = Path(results_dir, msg["dir"]).glob(msg["file"] + "*." + msg["ext"])
        if sample_file := next(files, None):
            output_dict[msg["name"]] = str(sample_file)
        else:
            output_dict[st["name"]] = None

        igni_log = SIM_OUTPUTS["ignitionpoints"]
        igni_file = Path(results_dir, igni_log["dir"], igni_log["file"] + "." + igni_log["ext"])
        if igni_file.is_file():
            output_dict[igni_log["name"]] = str(igni_file)
        else:
            output_dict[igni_log["name"]] = None

        # results_dir = Path().cwd()
        # files = []
        # parent = [None]
        # for afile in results_dir.rglob("*"):
        #     if afile.is_file():
        #         new_parent = afile.parent.relative_to(results_dir)
        #         if parent[-1] != new_parent:
        #             parent += [new_parent]
        #         files += [str(afile)]
        #         print(afile.name,new_parent,len(files),len(parent))
        # output_dict["files"] = files
        # with open(Path(self.results_dir, "qgis_log.html"), "w") as f:
        #     f.write(feedback.htmlLog())
        # QgsMessageLog.logMessage(f"{self.name()}, OUTPUT: {self.output_dict}", tag=TAG, level=Qgis.Info)
        feedback.pushInfo(f"output dictionary: {output_dict}")
        write_log(feedback, name=self.name(), file_name=Path(results_dir, "qgis_log.html"))
        return self.output_dict

    def icon(self):
        return QIcon(":/plugins/fireanalyticstoolbox/assets/forestfire.svg")

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "cell2firesimulator"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        return self.tr(self.name())
        """
        return self.tr("Cell2 Fire Simulator")

    # def group(self):
    #     """
    #     Returns the name of the group this algorithm belongs to. This string
    #     should be localised.
    #     """
    #     return self.tr(self.groupId())

    # def groupId(self):
    #     """
    #     Returns the unique ID of the group this algorithm belongs to. This
    #     string should be fixed for the algorithm, and must not be localised.
    #     The group id should be unique within each provider. Group id should
    #     contain lowercase alphanumeric characters only and no spaces or other
    #     formatting characters.
    #     """
    #     return "experimental"

    def tr(self, string, context="FireSimulatorAlgorithm"):
        return QCoreApplication.translate(context, string)

    def createInstance(self):
        return FireSimulatorAlgorithm()

    def helpString(self):
        return self.shortHelpString()

    def shortHelpString(self):
        return self.tr(
            """
            See documentation:
            <a href=https://fire2a.github.io/docs/qgis-toolbox/algo_simulator.html>This dialog</a>
            <a href=https://fire2a.github.io/docs/Cell2FireW>Cell2FireW</a>
            <font color="red">Warning: GeoTiff(.tif) support (in development) limited to only reading the fuels layer!</font> If planning to use more layers, transform them to AIIGrid(.asc) format!
            <font color="orange">Warning: Kitral cbh and cbd rasters must use nodata -9999</font>
            """
        )


def get_rasters(self, parameters, context):
    raster = dict(
        zip(
            SIM_INPUTS.keys(),  # ["fuels", "elevation", "cbh", "cbd", "ccf", "hm", "py"],
            map(
                lambda x: self.parameterAsRasterLayer(parameters, x, context),
                [
                    self.FUEL,
                    self.ELEVATION,
                    self.CBH,
                    self.CBD,
                    self.CCF,
                    self.HM,
                    self.IGNIPROBMAP,
                ],
            ),
        )
    )
    return raster


def get_gdal_driver_shortname(raster: QgsRasterLayer):
    if hasattr(raster, "publicSource"):
        raster_filename = raster.publicSource()
    else:
        raise AttributeError(f"raster {raster.name()} does not have a public source attribute!")
    filepath = Path(raster_filename)
    if not filepath.is_file() or filepath.stat().st_size == 0:
        raise FileNotFoundError(f"raster {raster.name()} file does not exist or is empty!")
    return gdal.Open(raster_filename, gdal.GA_ReadOnly).GetDriver().ShortName  # AAIGrid


def get_qgs_raster_properties(raster: QgsRasterLayer) -> dict:
    return {
        "name": raster.name(),
        "bandCount": raster.bandCount(),  # 1
        "width": raster.width(),
        "height": raster.height(),
        "crs": raster.crs().authid(),
        "units": raster.crs().mapUnits(),
        # "extent": raster.extent(),
        "xMinimum": raster.extent().xMinimum(),
        "yMinimum": raster.extent().yMinimum(),
        "xMaximum": raster.extent().xMaximum(),
        "yMaximum": raster.extent().yMaximum(),
        "rasterUnitsPerPixelX": raster.rasterUnitsPerPixelX(),
        "rasterUnitsPerPixelY": raster.rasterUnitsPerPixelY(),
    }


def compare_raster_properties(base: dict, incumbent: dict):
    for key in ["bandCount", "width", "height", "crs"]:
        if base[key] != incumbent[key]:
            return False, f"raster '{incumbent['name']}' {key} dont'match to fuels! {base[key]}!={incumbent[key]}"
    if not isclose(base["rasterUnitsPerPixelX"], incumbent["rasterUnitsPerPixelX"], abs_tol=1e-3):
        return (
            False,
            (
                f"raster '{incumbent['name']}' rasterUnitsPerPixelX not close enough!"
                f" {abs(base['rasterUnitsPerPixelX']-incumbent['rasterUnitsPerPixelX'])}"
            ),
        )
    if not isclose(base["rasterUnitsPerPixelY"], incumbent["rasterUnitsPerPixelY"], abs_tol=1e-3):
        return (
            False,
            (
                f"raster '{incumbent['name']}' rasterUnitsPerPixelY not close enough!"
                f" {abs(base['rasterUnitsPerPixelY']-incumbent['rasterUnitsPerPixelY'])}"
            ),
        )
    ruppx = (base["rasterUnitsPerPixelX"] + incumbent["rasterUnitsPerPixelX"]) / 2
    ruppy = (base["rasterUnitsPerPixelY"] + incumbent["rasterUnitsPerPixelY"]) / 2
    for key in ["xMinimum", "xMaximum"]:
        if not isclose(base[key], incumbent[key], abs_tol=ruppx):
            return (
                False,
                f"raster '{incumbent['name']}' {key} not close enough!\n| {base[key]} - {incumbent[key]} | > {ruppx}",
            )
    for key in ["yMinimum", "yMaximum"]:
        if not isclose(base[key], incumbent[key], abs_tol=ruppy):
            return (
                False,
                f"raster '{incumbent['name']}' {key} not close enough!\n| {base[key]} - {incumbent[key]} | > {ruppy}",
            )
    return True, "all ok"


def get_ext():
    """checks if cell2fire binary is available"""
    if platform_system() == "Windows":
        suffix = ".exe"

    elif platform_system() == "Linux":
        distribution = popen("lsb_release --short --id 2>/dev/null").read().strip()
        codename = popen("lsb_release --short --codename 2>/dev/null").read().strip()
        machine = popen("uname --machine 2>/dev/null").read().strip()
        suffix = "." + distribution + "." + codename + "." + machine
        c2f_bin = Path(c2f_path, f"Cell2Fire{suffix}")
        if not c2f_bin.is_file():
            suffix = ""
            c2f_bin = Path(c2f_path, f"Cell2Fire{suffix}")
        if which("ldd"):
            ldd = popen("ldd " + str(c2f_bin)).read()
            if "not found" in ldd:
                suffix = ""

    elif platform_system() == "Darwin":
        # echo "suffix="$(uname -s).${{ matrix.runner }}.$(arch)"" >> $GITHUB_ENV
        os = popen("uname -s 2>/dev/null").read().strip()
        pname = popen("sw_vers -productName 2>/dev/null").read().strip()
        pmayorvers = int(popen("sw_vers -productVersion 2>/dev/null | cut -d '.' -f 1 2>/dev/null").read().strip())
        arch = popen("arch 2>/dev/null").read().strip()
        if arch == "arm64" and pmayorvers != 14:
            pmayorvers = 14
        if arch == "i386" and pmayorvers > 13:
            pmayorvers = 13
        if arch == "i386" and pmayorvers < 12:
            pmayorvers = 12
        suffix = f"_{os}.{pname}-{pmayorvers}.{arch}-static"
        if which("otool -L"):
            c2f_bin = Path(c2f_path, f"Cell2Fire{suffix}")
            if c2f_bin.is_file():
                ldd = popen("otool -L " + str(c2f_bin) + " 2>&1 ").read()
            else:
                suffix = suffix.replace("-static", "")
                c2f_bin = Path(c2f_path, f"Cell2Fire{suffix}")
                if c2f_bin.is_file():
                    ldd = popen("otool -L " + str(c2f_bin) + " 2>&1 ").read()

    c2f_bin = Path(c2f_path, f"Cell2Fire{suffix}")
    st = c2f_bin.stat()
    # TODO check if chmod is needed or failed!
    chmod(c2f_bin, st.st_mode | S_IXUSR | S_IXGRP | S_IXOTH)
    return suffix
