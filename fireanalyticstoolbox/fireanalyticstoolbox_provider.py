# -*- coding: utf-8 -*-

"""
/***************************************************************************
 FireToolbox
                                 A QGIS plugin
 A collection of fire insights related algorithms
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-08-30
        copyright            : (C) 2023 by Fernando Badilla Veliz - Fire2a.com
        email                : fbadilla@ing.uchile.cl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = "Fernando Badilla Veliz - Fire2a.com"
__date__ = "2023-08-30"
__copyright__ = "(C) 2023 by Fernando Badilla Veliz - Fire2a.com"

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = "$Format:%H$"

from qgis.core import QgsProcessingProvider
from qgis.PyQt.QtGui import QIcon

from .algorithm_clusterize import ClusterizeAlgorithm
from .algorithm_deprecated import IgnitionPointsFromLogFileSIMPP
from .algorithm_instance_downloader import InstanceDownloader
from .algorithm_knapsack import MultiObjectiveRasterKnapsackAlgorithm, PolygonKnapsackAlgorithm, RasterKnapsackAlgorithm
from .algorithm_match_aiigrids import MatchAIIGrid
from .algorithm_meteo import MeteoAlgo
from .algorithm_postsimulation import (BetweennessCentralityMetric, BurnProbabilityMetric,
                                       DownStreamProtectionValueMetric, IgnitionPointsSIMPP, MessagesSIMPP,
                                       PostSimulationAlgorithm, ScarSIMPP, StatisticSIMPP)
from .algorithm_raster_tutorial import RasterTutorial
from .algorithm_sandbox import SandboxAlgorithm
from .algorithm_simulator import FireSimulatorAlgorithm
from .algorithm_treatment import PolyTreatmentAlgorithm, RasterTreatmentAlgorithm, RasterTreatmentTeamAlgorithm
from .assets.resources import *
from .fireanalyticstoolbox_algorithm import FireToolboxAlgorithm


class FireToolboxProvider(QgsProcessingProvider):
    def __init__(self):
        """
        Default constructor.
        """
        QgsProcessingProvider.__init__(self)

    def unload(self):
        """
        Unloads the provider. Any tear-down steps required by the provider
        should be implemented here.
        """
        pass

    def loadAlgorithms(self):
        """
        Loads all algorithms belonging to this provider.
        """
        self.addAlgorithm(FireToolboxAlgorithm())
        self.addAlgorithm(SandboxAlgorithm())
        self.addAlgorithm(RasterKnapsackAlgorithm())
        self.addAlgorithm(MultiObjectiveRasterKnapsackAlgorithm())
        self.addAlgorithm(PolygonKnapsackAlgorithm())
        self.addAlgorithm(ClusterizeAlgorithm())
        self.addAlgorithm(FireSimulatorAlgorithm())
        self.addAlgorithm(PostSimulationAlgorithm())
        self.addAlgorithm(MessagesSIMPP())
        self.addAlgorithm(StatisticSIMPP())
        self.addAlgorithm(IgnitionPointsSIMPP())
        self.addAlgorithm(ScarSIMPP())
        self.addAlgorithm(BetweennessCentralityMetric())
        self.addAlgorithm(DownStreamProtectionValueMetric())
        self.addAlgorithm(BurnProbabilityMetric())
        self.addAlgorithm(RasterTutorial())
        self.addAlgorithm(InstanceDownloader())
        self.addAlgorithm(PolyTreatmentAlgorithm())
        self.addAlgorithm(RasterTreatmentAlgorithm())
        self.addAlgorithm(RasterTreatmentTeamAlgorithm())
        self.addAlgorithm(MatchAIIGrid())
        self.addAlgorithm(MeteoAlgo())
        self.addAlgorithm(IgnitionPointsFromLogFileSIMPP())

    def id(self):
        """
        Returns the unique provider id, used for identifying the provider. This
        string should be a unique, short, character only string, eg "qgis" or
        "gdal". This string should not be localised.
        """
        return "fire2a"

    def name(self):
        """
        Returns the provider name, which is used to describe the provider
        within the GUI.

        This string should be short (e.g. "Lastools") and localised.
        """
        return self.tr("Fire Analytics")

    def icon(self):
        """
        Should return a QIcon which is used for your provider inside
        the Processing toolbox.
        return QgsProcessingProvider.icon(self)
        """
        return QIcon(":/plugins/fireanalyticstoolbox/assets/bonfire.svg")

    def longName(self):
        """
        Returns the a longer version of the provider name, which can include
        extra details such as version numbers. E.g. "Lastools LIDAR tools
        (version 2.2.1)". This string should be localised. The default
        implementation returns the same string as name().
        """
        return self.name()
