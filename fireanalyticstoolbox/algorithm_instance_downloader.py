#!python3
"""
/***************************************************************************
 FireToolbox
                                 A QGIS plugin
 A collection of fire insights related algorithms
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-08-30
        copyright            : (C) 2024 by Fernando Badilla Veliz - Fire2a.com
        email                : fbadilla@ing.uchile.cl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from json import load as json_load
from pathlib import Path
from tempfile import NamedTemporaryFile
from zipfile import ZipFile

import processing
from qgis.core import (QgsProcessingAlgorithm, QgsProcessingException, QgsProcessingParameterEnum,
                       QgsProcessingParameterFileDestination, QgsProject)
from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon

from .algorithm_utils import write_log


class InstanceDownloader(QgsProcessingAlgorithm):
    INSTANCE = "INSTANCE"
    FILEDEST = "FileDestination"
    owner, repo = "fire2a", "C2F-W"
    url = f"https://api.github.com/repos/{owner}/{repo}/releases/latest"
    yson = None

    def initAlgorithm(self, config):
        try:
            output = processing.run(
                "native:filedownloader",
                {
                    "URL": self.url,
                    "METHOD": "0",
                    "OUTPUT": "TEMPORARY_OUTPUT",
                },
            )
            if "OUTPUT" not in output:
                raise QgsProcessingException("QGIS native:filedownloader did not return correctly")
            if not Path(output["OUTPUT"]).is_file() or Path(output["OUTPUT"]).stat().st_size == 0:
                raise QgsProcessingException("QGIS native:filedownloader did not return a valid file")
            with open(output["OUTPUT"], "r") as f:
                self.yson = json_load(f)
        except QgsProcessingException:
            self.yson = {"assets": [{"name": "No internet, try again later! check Processing logs for more info"}]}

        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.INSTANCE,
                description=self.tr("Select the instances to download"),
                options=[item["name"] for item in self.yson["assets"]],
                defaultValue=0,
            )
        )
        self.addParameter(
            QgsProcessingParameterFileDestination(
                name=self.FILEDEST,
                description=self.tr(
                    "Output file [optional]\n"
                    "- leave empty for using selected filename and temporary path\n"
                    "- if current project is saved its path will be used\n"
                    "- else use absolute filenaming (.zip extension is suggested)\n"
                    "- or relative filenaming for users home directory (or default qgis launch path)\n\n"
                    "After downloading, the file will be unzipped and opened in the file browser\n"
                ),
                optional=True,
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        instance = [item["name"] for item in self.yson["assets"]][
            self.parameterAsInt(parameters, self.INSTANCE, context)
        ]
        # feedback.pushDebugInfo(f"instance: {instance}")
        for asset in self.yson["assets"]:
            if asset["name"] == instance:
                dl_url = asset["browser_download_url"]
        # feedback.pushDebugInfo(f"dl_url :{dl_url}")
        outfiledest = Path(self.parameterAsString(parameters, self.FILEDEST, context))
        # feedback.pushDebugInfo(f"outfiledest i: {outfiledest}")
        if outfiledest.name == self.FILEDEST + ".file":
            project_path = QgsProject().instance().absolutePath()
            if project_path != "":
                outfiledest = Path(project_path).parent / instance
            else:
                outfiledest = outfiledest.parent / instance
        # feedback.pushInfo(f"outfiledest f: {outfiledest}")
        feedback.pushInfo(
            f"Requesting {instance} from {dl_url}, check progress on Processing tab on Log Messages panel..."
        )
        try:
            output = processing.run(
                "native:filedownloader",
                {
                    "URL": dl_url,
                    "METHOD": "0",
                    "OUTPUT": str(outfiledest),
                },
            )
        except QgsProcessingException as e:
            feedback.reportError(f"Exception downloading {instance}: {e}")
            return {"no internet": "try again later"}
        # feedback.pushInfo(f"{output}")
        feedback.pushInfo(f"Download complete to {outfiledest}, unzipping...")
        # unzip
        with ZipFile(outfiledest, "r") as zip_ref:
            zip_ref.extractall(outfiledest.parent)
        feedback.pushInfo("Unzipping complete, opening directory...")
        qgis_action_open_filebrowser(outfiledest.parent)
        write_log(feedback, name=self.name())
        return output

    def name(self):
        return "instancedownloader"

    def displayName(self):
        return self.tr("Instance Downloader")

    def tr(self, string):
        return QCoreApplication.translate("Processing", string)

    def createInstance(self):
        return InstanceDownloader()

    def icon(self):
        return QIcon(":/plugins/fireanalyticstoolbox/assets/downloader.svg")


def qgis_action_open_filebrowser(directory):
    from platform import system
    from subprocess import Popen

    if system() == "Windows":
        Popen(f'explorer "{directory}"')
    elif system() == "Darwin":
        Popen(["open", directory])
    else:
        Popen(["xdg-open", directory])
